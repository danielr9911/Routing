#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
//
var data = require('../medellin.js');

// var i = 0;


// var time = new Date();
// for (var key in data){
//   var node =data[key];
//   var geo = new db.Nodes({
//     id: key,
//     loc: [node.lon, node.lat],
//     adj: node.adj
//   });
//
//   geo.save(function (error, done) {
//     if(error){
//       console.log(error);
//     }
//   });
//
//   console.log(new Date()-time, i);
//   i++;
//   // if(i>1) break;
// }

// console.log(i++);

var time = new Date();
var fs = require('fs');
var nodeFile = fs.createWriteStream('./tmp/nodes.txt');
var arcFile = fs.createWriteStream('./tmp/arc.txt');


for (var key in data){
  var node =data[key];

  for(var i=0; i<node.adj.length; i++){
    var destination = data[node.adj[i]];




    var totalLon = Math.pow((node.lon - destination.lon), 2);
    var totalLat = Math.pow((node.lat - destination.lat), 2);

    var total = parseInt(Math.sqrt(totalLon + totalLat)*100000);


    arcFile.write(key+" "+node.adj[i]+" "+total+'\n');



  }

  nodeFile.write(key+'\n');
}
//
//
console.log(new Date()-time);

nodeFile.end();
arcFile.end();